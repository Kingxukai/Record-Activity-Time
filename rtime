#!/usr/bin/env python3
import subprocess
import sys
import sqlite3
import os
import hashlib
import argparse
from datetime import datetime

def install_requirements():
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])

try:
    from colorama import Fore, init

except ImportError:
    install_requirements()

# 默认的数据库路径
DEF_DB_PATH = "~/.config/rtime/rtime.db"
DB_PATH = ""

# 创建数据库连接
def get_db_connection():
    if not os.path.exists(DB_PATH):
        print(Fore.RED + "Database path " + Fore.YELLOW + f"{DB_PATH}" + Fore.RED + " does not exist" + Fore.RESET)
        exit(1)
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# 创建项目表，任务表和记录表
def init_db(args=None):
    if os.path.exists(DB_PATH):
        print(Fore.YELLOW + f"{DB_PATH}" + Fore.GREEN + " exists." + Fore.RESET)
        return

    parent_dir = os.path.dirname(DB_PATH)
    if parent_dir and not os.path.exists(parent_dir):
        os.makedirs(parent_dir, exist_ok=True)
        print(Fore.YELLOW + f"Directory {parent_dir}" + Fore.GREEN + " was created." + Fore.RESET)

    conn = sqlite3.connect(DB_PATH)
    print(Fore.YELLOW + f"{DB_PATH}" + Fore.GREEN + " was created." + Fore.RESET)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS projects (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT UNIQUE
                    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT UNIQUE,
                        project_id INTEGER,
                        FOREIGN KEY (project_id) REFERENCES projects(id)
                    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS records (
                        id TEXT PRIMARY KEY,
                        task_id INTEGER,
                        project_id INTEGER,
                        start_time DATETIME,
                        end_time DATETIME,
                        message TEXT,
                        status TEXT,
                        FOREIGN KEY (task_id) REFERENCES tasks(id),
                        FOREIGN KEY (project_id) REFERENCES projects(id)
                    )''')
    conn.commit()
    conn.close()
    print(Fore.YELLOW + f"{DB_PATH}" + Fore.GREEN + " was initialized." + Fore.RESET)

# 创建项目
def create_project(name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO projects (name) VALUES (?)", (name,))
    conn.commit()
    conn.close()
    print(Fore.GREEN + "Project " + Fore.YELLOW +  f"{name}" + Fore.GREEN + " created successfully." + Fore.RESET)

# 显示所有项目
def list_projects(args):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM projects")
    projects = cursor.fetchall()
    if not projects:
        print(Fore.RED + "No projects found." + Fore.RESET)
    else:
        for project in projects:
            project_id = project['id']
            cursor.execute("SELECT SUM(strftime('%s', end_time) - strftime('%s', start_time)) FROM records WHERE project_id = ?", (project_id,))
            elapsed_time_seconds = cursor.fetchone()[0] or 0

            # 将秒数格式化为时间字符串
            days = int(elapsed_time_seconds // (3600 * 24))
            hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
            minutes = int((elapsed_time_seconds % 3600) // 60)
            seconds = int(elapsed_time_seconds % 60)

            # 创建一个时间字符串
            elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"

            print("Project:" + Fore.YELLOW + f"{project['name']}" + Fore.RESET + f", Total Time: {days} {elapsed_time}")
    conn.close()

# 删除项目
def delete_project(name):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # 获取项目 ID
    cursor.execute("SELECT id FROM projects WHERE name = ?", (name,))
    project = cursor.fetchone()
    
    if not project:
        print(Fore.RED + "Project " + Fore.YELLOW + f"{name}" + Fore.RED + " not found." + Fore.RESET)
        conn.close()
        return
    
    project_id = project['id']
    
    # 删除与项目关联的任务下的所有项
    cursor.execute(" DELETE FROM records WHERE task_id IN ( SELECT task_id FROM tasks WHERE project_id = ?) ", (project_id,))
    
    # 删除与项目关联的所有任务
    cursor.execute("DELETE FROM tasks WHERE project_id = ?", (project_id,))
    
    # 删除项目本身
    cursor.execute("DELETE FROM projects WHERE name = ?", (name,))
    
    # 提交事务
    conn.commit()
    conn.close()
    print(Fore.GREEN + "Project " + Fore.YELLOW + f"{name}" + Fore.GREEN +" and its tasks and items deleted successfully." + Fore.RESET)

# 创建任务
def create_task(name, project_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
    project = cursor.fetchone()
    if not project:
        print(Fore.RED + "Project " + Fore.YELLOW + f"{project_name}" + Fore.RED + " not found." + Fore.RESET)
        return
    cursor.execute("INSERT INTO tasks (name, project_id) VALUES (?, ?)", (name, project['id']))
    conn.commit()
    conn.close()
    print(Fore.GREEN + "Task " + Fore.YELLOW + f"{name}" + Fore.GREEN + f" created under project " + Fore.YELLOW + f"{project_name}" + Fore.RESET + ".")

# 删除任务
def delete_task(name, project_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # 获取项目 ID
    cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
    project = cursor.fetchone()
    
    if not project:
        print(Fore.RED + "Project " + Fore.YELLOW + f"{project_name}" + Fore.RED + " not found." + Fore.RESET)
        conn.close()
        return
    
    project_id = project['id']
    
    # 获取任务 ID
    cursor.execute("SELECT id FROM tasks WHERE name = ? AND project_id = ?", (name, project_id))
    task = cursor.fetchone()
    
    if not task:
        print(Fore.RED + "Task " + Fore.YELLOW + f"{name}" + Fore.RED + " not found in project " + Fore.YELLOW + f"{project_name}"+ Fore.GREEN + "." + Fore.RESET)
        conn.close()
        return
    
    task_id = task['id']
    
    # 删除与任务关联的所有项
    cursor.execute("DELETE FROM records  WHERE task_id = ?", (task_id,))
    
    # 删除任务本身
    cursor.execute("DELETE FROM tasks WHERE name = ? AND project_id = ?", (name, project_id))
    
    # 提交事务
    conn.commit()
    conn.close()
    print(Fore.GREEN + "Task " + Fore.YELLOW + f"{name}" + Fore.GREEN + " and its items deleted from project " + Fore.YELLOW + f"{project_name}" + Fore.GREEN + "." + Fore.RESET)

# 显示任务
def list_tasks(project_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
    project = cursor.fetchone()
    if not project:
        print(Fore.RED + "Project " + Fore.YELLOW + f"{project_name}" + Fore.RED + " not found." + Fore.RESET)
        return
    cursor.execute("SELECT * FROM tasks WHERE project_id = ?", (project['id'],))
    tasks = cursor.fetchall()
    if not tasks:
        print(Fore.RED + "No tasks found for this project." + Fore.RESET)
    else:
        for task in tasks:
            task_id = task['id']
            cursor.execute("SELECT SUM(strftime('%s', end_time) - strftime('%s', start_time)) FROM records WHERE task_id = ?", (task_id,))
            elapsed_time_seconds = cursor.fetchone()[0] or 0

            # 将秒数格式化为时间字符串
            days = int(elapsed_time_seconds // (3600 * 24))
            hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
            minutes = int((elapsed_time_seconds % 3600) // 60)
            seconds = int(elapsed_time_seconds % 60)

            # 创建一个时间字符串
            elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"
            print("Task: " + Fore.YELLOW + f"{task['name']}" + Fore.RESET + f", Total Time: {days} {elapsed_time}")
    conn.close()

# 开始记录时间
def track_time(project_name, task_name, message):
    conn = get_db_connection()
    cursor = conn.cursor()

    # 检查当前是否有正在运行的
    cursor.execute("SELECT * FROM records WHERE status = 'running' LIMIT 1")
    record = cursor.fetchone()

    if record:
        print(Fore.RED + "There is a record running, please run " + Fore.YELLOW + "rtime finish" + Fore.RED + " first" + Fore.RESET)
        exit(1)

    # 查找项目和任务
    if project_name:
        cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
        project = cursor.fetchone()
        if not project:
            print(Fore.RED + "Project " + Fore.YELLOW + f"{project_name}" + Fore.RED + " not found." + Fore.RESET)
            return
        if task_name:
            cursor.execute("SELECT id FROM tasks WHERE name = ? AND project_id = ?", (task_name, project['id']))
            task = cursor.fetchone()
            if not task:
                print(f"Task '{task_name}' not found in Project '{project_name}'.")
                return
            project_id, task_id = project['id'], task['id']
        else:
            project_id, task_id = project['id'], None
    else:
        project_id, task_id = None, None

    # 生成记录ID
    record_id = hashlib.md5(f"{project_id}-{task_id}-{message}-{datetime.now()}".encode()).hexdigest()

    # 获取当前时间
    start_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # 插入记录
    cursor.execute("INSERT INTO records (id, task_id, project_id, start_time, status, message) VALUES (?, ?, ?, ?, ?, ?)",
                   (record_id, task_id, project_id, start_time, "running", message))
    conn.commit()
    conn.close()
    print(f"Time tracking started with ID: {record_id}")

# 结束记录时间
def finish_time(args):
    conn = get_db_connection()
    cursor = conn.cursor()

    # 查找正在运行的任务
    cursor.execute("SELECT * FROM records WHERE status = 'running' LIMIT 1")
    record = cursor.fetchone()

    if not record:
        print(Fore.RED + "No running task found." + Fore.RESET)
        return

    # 获取结束时间并转换为字符串
    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # 更新记录
    cursor.execute("UPDATE records SET end_time = ?, status = 'finished' WHERE id = ?",
                   (end_time, record['id']))
    conn.commit()

    # 计算已用时间（秒）
    cursor.execute("SELECT strftime('%s', end_time) - strftime('%s', start_time) FROM records WHERE id = ?", (record['id'],))
    elapsed_time_seconds = cursor.fetchone()[0] or 0

    # 将秒数格式化为时间字符串
    days = int(elapsed_time_seconds // (3600 * 24))
    hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
    minutes = int((elapsed_time_seconds % 3600) // 60)
    seconds = int(elapsed_time_seconds % 60)

    # 创建一个时间字符串
    elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"

    print(f"Time tracking finished with msg: " + Fore.YELLOW +  f"{record['message']}" + Fore.RESET + ". Total time spent: " + Fore.BLUE + f"{days} {elapsed_time}" + Fore.RESET)
    conn.close()

# 显示记录，按项目和任务树状结构显示
def list_records(args):
    conn = get_db_connection()
    cursor = conn.cursor()

    no_project = 0
    # 查询所有项目
    cursor.execute("SELECT id, name FROM projects")
    projects = cursor.fetchall()

    if not projects:
        print(Fore.RED + "No projects found." + Fore.RESET)
        no_project = 1
    else:
        # 遍历项目
        for project in projects:
            print(f" Project {project['name']}:")
            print("|")

            # 获取该项目下的所有任务
            cursor.execute("SELECT id, name FROM tasks WHERE project_id = ?", (project['id'],))
            tasks = cursor.fetchall()

            # 查找没有任务关联的记录
            cursor.execute("SELECT id, start_time, end_time, message FROM records WHERE task_id IS NULL AND project_id = ?", (project['id'],))
            orphan_records = cursor.fetchall()

            if orphan_records:
                print(Fore.MAGENTA + "|--->Orphan Records (No Associated Task):" + Fore.RESET)
                for record in orphan_records:
                    start_time = record['start_time']
                    end_time = record['end_time'] if record['end_time'] else "Running"

                    # 解析时间
                    start_time_obj = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
                    if end_time != "Running":
                        end_time_obj = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
                    else:
                        end_time_obj = datetime.now()
                    
                    # 计算时间差
                    if not record['end_time']:
                        elapsed_time_seconds = (datetime.now() - start_time_obj).total_seconds()
                    else:
                        elapsed_time_seconds = (end_time_obj - start_time_obj).total_seconds()

                    # 将秒数格式化为时间字符串
                    days = int(elapsed_time_seconds // (3600 * 24))
                    hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
                    minutes = int((elapsed_time_seconds % 3600) // 60)
                    seconds = int(elapsed_time_seconds % 60)

                    # 创建一个时间字符串
                    elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"

                    # 输出孤立记录
                    if end_time == "Running":
                        print(Fore.BLUE + f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}"+ Fore.RESET)
                    else:
                        print(f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}")


            if not tasks:
                print(Fore.RED + f"  No tasks found for project " + Fore.YELLOW + f"{project['name']}" + Fore.RESET + ".")
            else:
                # 遍历任务
                for task in tasks:
                    print(f"|--->Task {task['name']}:")

                    # 获取该任务下的所有记录
                    cursor.execute("SELECT id, start_time, end_time, message FROM records WHERE task_id = ?", (task['id'],))
                    records = cursor.fetchall()

                    if not records:
                        print(Fore.RED + "|      No records found for this task." + Fore.RESET)
                    else:
                        # 遍历并显示每条记录
                        for record in records:
                            start_time = record['start_time']
                            end_time = record['end_time'] if record['end_time'] else "Running"

                            # 解析时间
                            start_time_obj = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
                            if end_time != "Running":
                                end_time_obj = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
                            else:
                                end_time_obj = datetime.now()

                            # 计算时间差
                            if not record['end_time']:
                                elapsed_time_seconds = (datetime.now() - start_time_obj).total_seconds()
                            else:
                                elapsed_time_seconds = (end_time_obj - start_time_obj).total_seconds()

                            days = int(elapsed_time_seconds // (3600 * 24))
                            hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
                            minutes = int((elapsed_time_seconds % 3600) // 60)
                            seconds = int(elapsed_time_seconds % 60)

                            # 创建一个时间字符串
                            elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"

                            # 输出记录
                            if end_time == "Running":
                                print(Fore.BLUE + f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}"+ Fore.RESET)
                            else:
                                print(f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}")
                                
                print(Fore.GREEN + "|    ---------TASK END---------"+ Fore.RESET)

            print(Fore.YELLOW + "|---------PROJECT END---------\n"+ Fore.RESET)

    # 查找没有项目关联的记录
    cursor.execute("SELECT id, start_time, end_time, message FROM records WHERE project_id IS NULL")
    orphan_records = cursor.fetchall()

    if orphan_records:
        print(Fore.MAGENTA + " Orphan Records (No Associated Project):" + Fore.RESET)
        print("|")
        for record in orphan_records:
            start_time = record['start_time']
            end_time = record['end_time'] if record['end_time'] else "Running"

            # 解析时间
            start_time_obj = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
            if end_time != "Running":
                end_time_obj = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
            else:
                end_time_obj = datetime.now()

            # 计算时间差
            if not record['end_time']:
                elapsed_time_seconds = (datetime.now() - start_time_obj).total_seconds()
            else:
                elapsed_time_seconds = (end_time_obj - start_time_obj).total_seconds()

            days = int(elapsed_time_seconds // (3600 * 24))
            hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
            minutes = int((elapsed_time_seconds % 3600) // 60)
            seconds = int(elapsed_time_seconds % 60)

            # 创建一个时间字符串
            elapsed_time = f"day {hours:02}:{minutes:02}:{seconds:02}"

            # 输出孤立记录
            if end_time == "Running":
                print(Fore.BLUE + f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}"+ Fore.RESET)
            else:
                print(f"|      |-ID: {record['id']}, Start: {start_time}, End: {end_time}, Time Spent: {days} {elapsed_time}, Message: {record['message']}")
    else:
        if no_project:
            print(Fore.RED + "No Records found." + Fore.RESET)

    conn.close()

# 删除记录
def delete_record(record_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM records WHERE id = ?", (record_id,))
    record = cursor.fetchone()
    if not record:
        print(Fore.RED + "No record found of id: " + Fore.YELLOW + f"{record_id}" + Fore.RESET)
        return
    cursor.execute("DELETE FROM records WHERE id = ?", (record_id,))
    conn.commit()
    conn.close()
    print(Fore.GREEN + "Record " +  Fore.YELLOW + f"{record_id}" + Fore.GREEN + " deleted successfully." + Fore.RESET)

# 显示命令行参数的函数
def show_path(args=None):
    if os.path.expanduser(DEF_DB_PATH) != DB_PATH:
        print("Default Database Path: " + Fore.YELLOW + f" {os.path.expanduser(DEF_DB_PATH)}" + Fore.RESET)
        print("RTIME_DB_PATH: " + Fore.YELLOW + f"{DB_PATH}" + Fore.RESET)
    print("Database Path: " + Fore.YELLOW + f"{DB_PATH}" + Fore.RESET)

def parse_time(timestr):
    try:
        return datetime.fromisoformat(timestr)
    except Exception:
        return None

def time_diff_seconds(start, end):
    if not start or not end:
        return 0
    delta = end - start
    return delta.total_seconds()

def make_bar(value, max_value, max_width=30):
    """
    根据value和max_value绘制比例柱，最大宽度max_width，输出字符串示例：
    value=30, max_value=60，则长度15(满宽度一半)
    """
    if max_value <= 0:
        return ''
    ratio = value / max_value
    length = int(ratio * max_width)
    return '█' * length + '-' * (max_width - length)

class HeatmapStats:
    def __init__(self, conn):
        self.conn = conn

    def total_time_for_records(self, records):
        """计算多条records的总时间，单位秒"""
        total = 0
        for r in records:
            start_time = parse_time(r['start_time'])
            end_time = parse_time(r['end_time'])
            total += time_diff_seconds(start_time, end_time)
        return total

    def records_for_project(self, project_name):
        """1. 指定project中，每个record的热力图"""
        c = self.conn.cursor()
        c.execute("SELECT id FROM projects WHERE name=?", (project_name,))
        row = c.fetchone()
        if not row:
            print(Fore.RED + "No project named " + Fore.YELLOW +f"{project_name}" + Fore.RED + " found."+ Fore.RESET)
        project_id = row[0]

        # 查询该项目下所有records（join tasks过滤task所属项目）
        c.execute('''
        SELECT records.id, records.message, records.start_time, records.end_time
        FROM records
        WHERE project_id=?
        ''', (project_id,))
        records = c.fetchall()
        if not records:
            print(Fore.RED + "No records found."+ Fore.RESET)
            return
        # 转成字典
        records = [{'id': r[0], 'message': r[1], 'start_time': r[2], 'end_time': r[3]} for r in records]

        # 处理记录，计算总时间
        results = []
        max_total = 0
        for record in records:
            st = parse_time(record['start_time'])
            et = parse_time(record['end_time'])
            total_time = time_diff_seconds(st, et)
            if total_time > max_total:
                max_total = total_time
            results.append({
                'id': record['id'],
                'message': record['message'],
                'total_time': total_time
            })

        # 打印热力图
        self.print_heatmap(results, max_total, index="records")

    def print_heatmap(self, results, max_total, index):
        # 定义标题栏
        if index == "project" or index == "task":
            t_name = index + " Name"
            title_name = t_name.ljust(55)  # 任务名称列，左对齐，占55个字符
            title_heatmap = "Heatmap".ljust(30)  # 热力图列，左对齐，占30个字符
            title_time = "Total Time"  # 时间列
            print(f"{title_name} | {title_heatmap} | {title_time}")
            print("-" * 60)  # 分隔线

            # 打印每个任务的热力图
            for result in results:
                name = result['name'].ljust(55)  # 任务名称左对齐
                elapsed_time_seconds = result['total_time']

                # 将秒数格式化为时间字符串
                days = int(elapsed_time_seconds // (3600 * 24))
                hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
                minutes = int((elapsed_time_seconds % 3600) // 60)
                seconds = int(elapsed_time_seconds % 60)
                # 计算热力图的柱状图长度（假设最大长度为30个█）
                bar_length = int(elapsed_time_seconds / max_total * 30) if max_total > 0 else 0
                heatmap = "█" * bar_length + " " * (30 - bar_length)  # 热力图列固定30字符
                print(f"{name} | {heatmap} | {days}days, {hours}:{minutes}:{seconds}")
        else:
            title_id = "ID".ljust(32)  # ID 列，左对齐，占30个字符
            title_message = "Message".ljust(20)  # Message 列，左对齐，占20个字符
            title_heatmap = "Heatmap".ljust(30)  # 热力图列，左对齐，占30个字符
            title_time = "Total Time"  # 时间列
            print(f"{title_id} | {title_message} | {title_heatmap} | {title_time}")
            print("-" * 65)  # 分隔线

            for result in results:
                id_str = str(result['id']).ljust(32)  # ID 列左对齐
                message = result['message'][:18].ljust(20)  # Message 截断到18字符，左对齐
                elapsed_time_seconds = result['total_time']

                # 将秒数格式化为时间字符串
                days = int(elapsed_time_seconds // (3600 * 24))
                hours = int((elapsed_time_seconds % (3600 * 24) ) // 3600)
                minutes = int((elapsed_time_seconds % 3600) // 60)
                seconds = int(elapsed_time_seconds % 60)

                # 计算热力图长度（最大30个█）
                bar_length = int(elapsed_time_seconds / max_total * 30) if max_total > 0 else 0
                heatmap = "█" * bar_length + " " * (30 - bar_length)  # 热力图固定30字符
                print(f"{id_str} | {message} | {heatmap} | {days}days, {hours}:{minutes}:{seconds}")

    def tasks_heatmap_for_project(self, project_name):
        """2. 指定project中每个task的total_time热力图"""
        c = self.conn.cursor()
        c.execute("SELECT id FROM projects WHERE name=?", (project_name,))
        row = c.fetchone()
        if not row:
            print(Fore.RED + "No project named " + Fore.YELLOW +f"{project_name}" + Fore.RED + " found."+ Fore.RESET)
            return
        project_id = row[0]

        # 查询该项目下所有task
        c.execute("SELECT id, name FROM tasks WHERE project_id=?", (project_id,))
        tasks = c.fetchall()
        tasks = [{'id': t[0], 'name': t[1]} for t in tasks]
        if not tasks:
            print(Fore.RED + f"No tasks found for project " + Fore.YELLOW + f"{project_name}"+ Fore.RESET + ".")
            return

        results = []
        max_total = 0
        for task in tasks:
            c.execute('''
            SELECT start_time, end_time
            FROM records
            WHERE task_id=?
            ''', (task['id'],))
            recs = c.fetchall()
            total_time = 0
            for r in recs:
                st = parse_time(r[0])
                et = parse_time(r[1])
                total_time += time_diff_seconds(st, et)
            if total_time > max_total:
                max_total = total_time
            results.append({'name': task['name'], 'total_time': total_time})
        goon = 0
        for result in results:
            if result:
                goon = 1
                break
        if not goon:
            return
        
        self.print_heatmap(results, max_total, "task")

        #return self._render_named_heatmap(results, max_total)

    def records_heatmap_for_task(self, project_name, task_name):
        """3. 指定task中每个record的热力图"""
        c = self.conn.cursor()
        c.execute("SELECT id FROM projects WHERE name=?", (project_name,))
        row = c.fetchone()
        if not row:
            print(Fore.RED + f"No project named " + Fore.YELLOW + f"{project_name}" + Fore.RED + " found." + Fore.RESET)
            return
        project_id = row[0]

        c.execute("SELECT id FROM tasks WHERE name=? and project_id = ?", (task_name, project_id,))
        row = c.fetchone()
        if not row:
            print(Fore.RED + f"No task named " + Fore.YELLOW + f"{task_name}" + Fore.RED + " found." + Fore.RESET)
            return
        task_id = row[0]

        c.execute('''
        SELECT id, message, start_time, end_time
        FROM records
        WHERE task_id=?
        ''', (task_id,))
        records = c.fetchall()
        if not records:
            print(Fore.RED + "No records found in task " + Fore.YELLOW + f"{task_name}" + Fore.RESET + ".")
            return
        records = [{'id': r[0], 'message': r[1], 'start_time': r[2], 'end_time': r[3]} for r in records]

        # 处理记录，计算总时间
        results = []
        max_total = 0
        for record in records:
            st = parse_time(record['start_time'])
            et = parse_time(record['end_time'])
            total_time = time_diff_seconds(st, et)
            if total_time > max_total:
                max_total = total_time
            results.append({
                'id': record['id'],
                'message': record['message'],
                'total_time': total_time
            })

        # 打印热力图
        self.print_heatmap(results, max_total, index="records")

    def projects_total_time_heatmap(self):
        """4. 所有project的total_time热力图"""
        c = self.conn.cursor()
        c.execute("SELECT id, name FROM projects")
        projects = c.fetchall()
        if not projects:
            print(Fore.RED + "No Projects found." + Fore.RESET)
            return
        projects = [{'id': p[0], 'name': p[1]} for p in projects]

        results = []
        max_total = 0
        for project in projects:
            # 查询该project的所有records时间总和（用project_id过滤）
            c.execute('''
            SELECT start_time, end_time FROM records WHERE project_id=?
            ''', (project['id'],))
            recs = c.fetchall()
            total_time = 0
            for r in recs:
                st = parse_time(r[0])
                et = parse_time(r[1])
                total_time += time_diff_seconds(st, et)
            if total_time > max_total:
                max_total = total_time
            results.append({'name': project['name'], 'total_time': total_time})
        self.print_heatmap(results, max_total, "project")

    def _render_named_heatmap(self, items, max_total):
        """
        items格式：[{'name':'xxx','total_time':秒数}]
        绘制类热力柱状图，输出格式:
        名称 | 柱状图 | 时间显示(秒/方便阅读)
        """
        lines = []
        for item in items:
            bar = make_bar(item['total_time'], max_total)
            time_str = self._format_duration(item['total_time'])
            line = f"{item['name']:<20} | {bar} | {time_str}"
            lines.append(line)
        return '\n'.join(lines)

    def _render_record_heatmap(self, records):
        """
        输出record列表热力柱，格式:
        id(short hash) | message | 柱状图 | 时间
        """
        # 找最大时间
        max_total = 0
        time_list = []
        for r in records:
            st = parse_time(r['start_time'])
            et = parse_time(r['end_time'])
            td = time_diff_seconds(st, et)
            time_list.append(td)
            if td > max_total:
                max_total = td
        lines = []
        for i, r in enumerate(records):
            bar = make_bar(time_list[i], max_total)
            time_str = self._format_duration(time_list[i])
            short_id = str(r['id'])[:8]
            line = f"{short_id:<10} | {r['message']:<30} | {bar} | {time_str}"
            lines.append(line)
        return '\n'.join(lines)

    def _format_duration(self, seconds):
        if seconds <= 0:
            return "0s"
        m, s = divmod(int(seconds), 60)
        h, m = divmod(m, 60)
        parts = []
        if h > 0:
            parts.append(f"{h}h")
        if m > 0:
            parts.append(f"{m}m")
        if s > 0:
            parts.append(f"{s}s")
        return ''.join(parts)

def handle_heatmap(project, task, all):
    conn = get_db_connection()
    heatmap = HeatmapStats(conn)
    if all:
        heatmap.projects_total_time_heatmap()
    elif project and not task:
        heatmap.records_for_project(project)
        print()
        heatmap.tasks_heatmap_for_project(project)

    if task and project:
        heatmap.records_heatmap_for_task(project, task)
    elif task and not project:
        print(Fore.RED + "Must specify project while specify task." + Fore.RESET)

    conn.close()

def validate_time_format(time_string):
    """验证时间字符串是否符合 'YYYY-MM-DD H:M:S' 格式"""
    try:
        # 尝试解析时间字符串
        return datetime.strptime(time_string, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        # 如果格式不匹配，抛出错误
        return None

def modify_time(id, start_time, end_time):
    if start_time and not validate_time_format(start_time):
       print(Fore.RED + f"Invalid start_time format: " +  Fore.YELLOW + f"{start_time}" + Fore.RESET + ". Expected format is " + Fore.YELLOW + " \"YYYY-MM-DD H:M:S\"" + Fore.RESET + ".")
       return

    if end_time and not validate_time_format(end_time):
       print(Fore.RED + f"Invalid end_time format: " +  Fore.YELLOW + f"{end_time}" + Fore.RESET + ". Expected format is " + Fore.YELLOW + " \"YYYY-MM-DD H:M:S\"" + Fore.RESET + ".")
       return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM records WHERE id = ?", (id,))
    record = cursor.fetchone()
    if start_time and end_time:
        cursor.execute("UPDATE records SET end_time = ?, start_time = ? WHERE id = ?",
                   (end_time, start_time, id,))
    elif start_time and not end_time:
        cursor.execute("UPDATE records SET start_time = ? WHERE id = ?",
                   (start_time, id,))
    elif not start_time and end_time:
        cursor.execute("UPDATE records SET end_time = ?  WHERE id = ?",
                   (end_time, id,))
    else:
        cursor.execute("UPDATE records SET end_time = ?, start_time = ? WHERE id = ?",
                ("2025-01-01 0:0:0", "2025-01-01 0:0:0", id,))
        
    conn.commit()
    conn.close()

def move_record(id, project_name, task_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    project_id_cursor = conn.cursor()
    task_id_cursor = conn.cursor()

    if task_name:
        project_id_cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
        task_id_cursor.execute("SELECT id FROM tasks WHERE name = ?", (task_name,))
        project_id = project_id_cursor.fetchone()[0]
        task_id = task_id_cursor.fetchone()[0]
        if not project_id or not task_id:
            print(Fore.YELLOW + f"{project_name}" + Fore.RED + "or" + Fore.YELLOW + f"{task_name}" + Fore.RED + "not found." + Fore.RESET)
            return

        cursor.execute("UPDATE records SET task_id = ?, project_id = ? WHERE id = ?",
                   (task_id, project_id, id,))
    elif project_name:
        project_id_cursor.execute("SELECT id FROM projects WHERE name = ?", (project_name,))
        project_id = project_id_cursor.fetchone()[0]
        if not project_id:
            print(Fore.YELLOW + f"{project_name}" + Fore.RED + "not found." + Fore.RESET)
            return

        cursor.execute("UPDATE records SET project_id = ? WHERE id = ?",
                   (project_id, id,))
    else:
        print(Fore.RED + "No project or task specified." + Fore.RESET)

    conn.commit()
    conn.close()

def rewrite_msg(id, msg):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM records WHERE id = ?", (id,))
    record = cursor.fetchone()
    
    if not record:
        print(Fore.YELLOW + f"{id}" + Fore.RED + " not found." + Fore.RESET)
        return

    cursor.execute("UPDATE records SET message = ? WHERE id = ?",
                   (msg, id,))
    conn.commit()
    conn.close()

def rm_db(args=None):
    confirm = input(Fore.RED + "Are you sure you want to rm the database" + Fore.YELLOW +f"({DB_PATH})" + "? Type" + Fore.BLUE + " y " + Fore.RED + "to confirm:" + Fore.RESET)
    if confirm.lower() in ['y']:
        try:
            os.remove(DB_PATH)
            print(Fore.YELLOW + f"{DB_PATH}" + Fore.GREEN + " deleted.")
        except FileNotFoundError:
            print(Fore.YELLOW + f"{DB_PATH}" + Fore.RED + " does not exists.")
        except PermissionError:
            print(Fore.YELLOW + f"{DB_PATH}" + Fore.RED + " :No Permission to delete.")
    else:
        print(Fore.GREEN + "Operation canceled.")
        sys.exit(0)

def rewrite_name(project_name, task_name, new_name):

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM projects WHERE name = ?", (project_name,))
    entry = cursor.fetchone()
    if not entry:
        print(Fore.YELLOW + f"{project_name}" + Fore.RED + " not found." + Fore.RESET)
        return
    project_id = entry['id']

    if not task_name:
        cursor.execute("UPDATE projects SET name = ? WHERE name = ?",
                       (new_name, project_name,))
    else:
        cursor.execute("SELECT * FROM tasks WHERE name = ? and project_id = ?", (task_name, project_id,))
        task_entry = cursor.fetchone()
        if not entry:
            print(Fore.YELLOW + f"{task_name}" + Fore.RED + " not found." + Fore.RESET)
            return
        cursor.execute("UPDATE tasks SET name = ? WHERE name = ?",
                       (new_name, task_name,))
    
    conn.commit()
    conn.close()

# 主函数
def main():
    parser = argparse.ArgumentParser(prog="rtime")
    subparsers = parser.add_subparsers()

    init_parser = subparsers.add_parser("init", help="Init database in DB_PATH")
    init_parser.set_defaults(func=init_db)

    rm_parser = subparsers.add_parser("rm", help="Remove database in DB_PATH")
    rm_parser.set_defaults(func=rm_db)

    # 创建项目
    project_parser = subparsers.add_parser("project", help="Manage projects")
    project_subparsers = project_parser.add_subparsers()

    # 创建项目命令
    create_project_parser = project_subparsers.add_parser("create", help="Create a new project")
    create_project_parser.add_argument("project", help="Project name", type=str)
    create_project_parser.set_defaults(func=lambda args: create_project(args.project))

    # 列出项目命令
    list_projects_parser = project_subparsers.add_parser("ls", help="List all projects")
    list_projects_parser.set_defaults(func=list_projects)

    # 删除项目命令
    delete_project_parser = project_subparsers.add_parser("delete", help="Delete a project")
    delete_project_parser.add_argument("project", help="Project name", type=str)
    delete_project_parser.set_defaults(func=lambda args: delete_project(args.project))

    # 创建任务命令
    task_parser = subparsers.add_parser("task", help="Manage tasks")
    task_subparsers = task_parser.add_subparsers()

    create_task_parser = task_subparsers.add_parser("create", help="Create a new task under a project")
    create_task_parser.add_argument("task", help="Task name", type=str)
    create_task_parser.add_argument("--project", required=True, help="The project under which the task will be created", type=str)
    create_task_parser.set_defaults(func=lambda args: create_task(args.task, args.project))

    delete_task_parser = task_subparsers.add_parser("delete", help="Delete a task from a project")
    delete_task_parser.add_argument("task", help="Task name", type=str)
    delete_task_parser.add_argument("--project", required=True, help="The project to delete the task from", type=str)
    delete_task_parser.set_defaults(func=lambda args: delete_task(args.task, args.project))

    list_tasks_parser = task_subparsers.add_parser("ls", help="List all tasks under a project")
    list_tasks_parser.add_argument("--project", required=True, help="Project name", type=str)
    list_tasks_parser.set_defaults(func=lambda args: list_tasks(args.project))

    # 记录时间命令
    track_parser = subparsers.add_parser("track", help="Track time for a task or project")
    track_parser.add_argument("--project", help="Project name", type=str)
    track_parser.add_argument("--task", help="Task name", type=str)
    track_parser.add_argument("-m", "--message", required=True, help="Message to attach to the time entry", type=str)
    track_parser.set_defaults(func=lambda args: track_time(args.project, args.task, args.message))

    # 结束时间命令
    finish_parser = subparsers.add_parser("finish", help="Finish the current running time entry")
    finish_parser.set_defaults(func=finish_time)

    # 列出所有记录
    list_parser = subparsers.add_parser("ls", help="List all time records")
    list_parser.set_defaults(func=list_records)

    # 删除记录
    delete_parser = subparsers.add_parser("delete", help="Delete a record by ID")
    delete_parser.add_argument("id", help="Record ID", type=str)
    delete_parser.set_defaults(func=lambda args: delete_record(args.id))

    # 添加PATH
    path_parser = subparsers.add_parser("path", help="Show DB_PATH(export RTIME_DB_PATH=\"/path/to/your/db\")")
    path_parser.set_defaults(func=show_path)

    # 热力图输出
    heatmap_parser = subparsers.add_parser("stats", help="Show heatmap status")
    heatmap_parser.add_argument("--project", help="Project Name", type=str)
    heatmap_parser.add_argument("--task", help="Task Name", type=str)
    heatmap_parser.add_argument("--all", help="All projects(bool)", type=bool)
    heatmap_parser.set_defaults(func=lambda args: handle_heatmap(args.project, args.task, args.all))

    time_parser = subparsers.add_parser("time", help="Modify time")
    time_parser.add_argument("--id", help="Specify record's id", required=True, type=str)
    time_parser.add_argument("--start_time", help="Start Time(Expected format is: \"YYYY-MM-DD H:M:S\")", type=str)
    time_parser.add_argument("--end_time", help="End Time(Expected format is: \"YYYY-MM-DD H:M:S\")", type=str)
    time_parser.set_defaults(func=lambda args: modify_time(args.id, args.start_time, args.end_time))

    move_parser = subparsers.add_parser("mv", help="Move a record under a project or task")
    move_parser.add_argument("--id", help="Specify record's id", required=True, type=str)
    move_parser.add_argument("--project", help="Project Name", required=True, type=str)
    move_parser.add_argument("--task", help="Task Name", type=str)
    move_parser.set_defaults(func=lambda args: move_record(args.id, args.project, args.task))

    msg_parser = subparsers.add_parser("msg", help="Modify a record's msg")
    msg_parser.add_argument("--id", help="Specify record's id", required=True, type=str)
    msg_parser.add_argument("-m", "--message", help="New msg", required=True, type=str)
    msg_parser.set_defaults(func=lambda args: rewrite_msg(args.id, args.message))

    rename_parser = subparsers.add_parser("rename", help="Modify a task's or project's name")
    rename_parser.add_argument("--project", help="Project Name", required=True, type=str)
    rename_parser.add_argument("--task", help="Task Name", type=str)
    rename_parser.add_argument("--name", help="New name", required=True, type=str)
    rename_parser.set_defaults(func=lambda args: rewrite_name(args.project, args.task, args.name))

    # 解析命令行参delete行相应操作
    args = parser.parse_args()

    if hasattr(args, 'func'):  # 检查是否有 'func' 属性
        args.func(args)
    else:
        print("No command specified, use -h for help.")  # 如果没有指定命令，则打印提示

def set_db_path():
    # 设置DB_PATH
    global DB_PATH
    DB_PATH = os.getenv("RTIME_DB_PATH", DEF_DB_PATH)
    if DB_PATH and DB_PATH == "":
        DB_PATH = DEF_DB_PATH
    DB_PATH = os.path.expanduser(DB_PATH)

if __name__ == "__main__":
    init() # init color font
    set_db_path()
    main()
